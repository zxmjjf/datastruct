链式结构
1）用对象来包装实际的元素，对象的数据成员中包含对象本身的引用next。
    不用固定容量，头节点的引用为指向对象的引用：front，

2）插入节点：
       a）插到链表的最前面：
              1》先让新节点的next指向第一个节点，即next = front;
              2》再让front指向新的节点。即 front = new Object;
       b)插到链表的任意位置i：(让新的节点做为第i个节点,也就是插到第i个元素之前)
              1》先找到第i-1个位置的元素（位置由1开始算），再让新节点的next值等于第i-1个节点的next值
                即：new next = （i-1）next;
                最后让第i-1个节点的next值指向新的节点

3）删除节点：
        a）删除的是头节点：
              1》front = front.next;(删除的节点没有引用变量指向，成为垃圾值

        b）删除的是第i个节点：
              2》先找到第i-1个节点，让第i-1个节点的next值等于第i个节点的next值。

4）数据逻辑：
        链表只是一种数据结构，是对数据的集合，所以，不能将数据结构和数据本身捆绑。链表的数据结构
        重要的引用应该仅仅指向数据，而数据应该自己包装，即数据之间的链接应该让数据类自己完成。

        数据类型：
            数据结构接口：代表某种特定的数据结构，即数据的集合方式。但注意与数据的底层实习无关
                          即：可以使用不止一种机制或实现方式达到所需的数据结构需求，如链式结结构
                          或顺序结构，当进行add()操作时完成相同的逻辑需求。

            链表类 --》代表完整的数据结构 ，提供链表节点的操作

            数据节点类 --》用于控制数据本身，提供对数据本身的描述。此节点类完全独立于链表类


